<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!-- 它们都是外部化，可替代的属性。可以配置在一个典型的Java 属性文件中，或者通过
        properties 元素的子元素进行配置 -->
    <properties resource="application.properties"></properties>
    <!-- 别名是一个较短的Java 类型的名称。用来设置别名 -->
    <typeAliases>
        <!-- 为指定的包下所有类设置别名，别名默认为类名 -->
        <package name="com.zyc.ship.dao"/>
        <!-- 为指定的类型设置别名
        <typeAlias type="cn.sxt.vo.User" alias="User"/>
        -->
    </typeAliases>
    <!-- MyBatis 能够配置多套运行环境，这有助于将您的SQL 映射到多个数据库上。例如，在您的
    开发、测试、生产环境中，您可能有不同的配置。
        default指向默认使用的环境
     -->
    <environments default="development">
        <environment id="development">
            <!--
                JDBC – 这个配置直接使用JDBC 的提交和回滚功能。它依赖于从数据源获得连接来管理
                事务的生命周期。
                • MANAGED – 这个配置基本上什么都不做。它从不提交或者回滚一个连接的事务。而是让
                容器（例如：Spring 或者J2EE 应用服务器）来管理事务的生命周期。
             -->
            <transactionManager type="JDBC" />
            <!--
                UNPOOLED – 这个类型的数据源实现只是在每次需要的时候简单地打开和关闭连接。
                POOLED – 这个数据源的实现缓存了JDBC 连接对象，用于避免每次创建新的数据库连接时都初始
                化和进行认证，加快程序响应。并发WEB 应用通常通过这种做法来获得快速响应。
                JNDI – 这个数据源的配置是为了准备与像Spring 或应用服务器能够在外部或者内部配置数据
                源的容器一起使用，然后在JNDI 上下文中引用它。
             -->
            <dataSource type="POOLED">
                <property name="driver" value="${driverClassName}" />
                <property name="url" value="${url}" />
                <property name="username" value="${username}" />
                <property name="password" value="${password}" />
                <!-- 在任意时间可以存在的活动（也就是正在使用）连接数量，默认值：10 -->
                <property name="poolMaximumActiveConnections" value="100" />
                <!-- 任意时间可能存在的空闲连接数 默认是5,最好设置为0,否则可能会崩溃掉 -->
                <property name="poolMaximumIdleConnections" value="0" />
                <!-- 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒） -->
                <property name="poolMaximumCheckoutTime" value="20000" />
                <!-- 这是一个底层设置，如果获取连接花费的相当长的时间，它会给连接池打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直安静的失败），默认值：20000
                    毫秒（即 20 秒）。 -->
                <property name="poolTimeToWait" value="20000" />

                <!-- 是否启用侦测查询。若开启，也必须使用一个可执行的 SQL 语句设置 poolPingQuery 属性（最好是一个非常快的 SQL），默认值：false。 -->
                <property name="poolPingEnabled" value="true" />
                <!-- 配置 poolPingQuery 的使用频度。这可以被设置成匹配具体的数据库连接超时时间，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测
                    — 当然仅当 poolPingEnabled 为 true 时适用） -->
                <property name="poolPingConnectionsNotUsedFor" value="3600000" />
                <!-- 发送到数据库的侦测查询，用来检验连接是否处在正常工作秩序中并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动失败时带有一个恰当的错误消息。 -->
                <property name="poolPingQuery" value="select 1" />
            </dataSource>
        </environment>
    </environments>


    <mappers>
        <package name="com.zyc.ship.dao"/>
    </mappers>
</configuration>